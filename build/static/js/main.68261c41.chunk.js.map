{"version":3,"sources":["components/Login/Login.component.jsx","components/Displayconversation/DisplayConversation.component.jsx","components/MessageBox/MessageBox.component.jsx","components/MeassagePanel/MessagePanel.component.jsx","App.js","index.js"],"names":["Login","login","e","preventDefault","props","setUsername","target","username","value","className","onSubmit","this","type","id","Component","DisplayConversation","displayMessage","messages","map","message","MessageBox","state","submit","messageHandler","keyCode","getMessage","setState","sumbitMessage","onKeyDown","placeholder","onClick","MessagePanel","connection","WebSocket","data","send","JSON","stringify","toSelf","onmessage","parse","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAwBeA,G,kNAjBXC,MAAQ,SAACC,GACLA,EAAEC,iBACF,EAAKC,MAAMC,YAAYH,EAAEI,OAAOC,SAASC,Q,uDAGzC,OACI,yBAAKC,UAAU,SACX,0BAAMC,SAAUC,KAAKV,OACjB,2CACA,2BAAOW,KAAK,OAAOC,GAAG,aACtB,2BAAOD,KAAK,SAASC,GAAG,SAASL,MAAM,iB,GAbvCM,c,OCmBLC,G,kNAlBXC,eAAiB,kBAAM,EAAKZ,MAAMa,SAASC,KAAI,SAAAC,GAAO,OACtD,yBAAKV,UAAU,QACX,yBAAKA,UAAU,UAAUU,EAAQZ,UACjC,yBAAKE,UAAU,WAAWU,EAAQA,c,uDAKlC,OACI,yBAAKV,UAAU,uBACX,wBAAIA,UAAU,UAAd,kBACA,6BACCE,KAAKK,sB,GAdYF,cCiCnBM,G,kNA9BXC,MAAQ,CACJC,QAAQ,EACRH,QAAS,I,EAEbI,eAAiB,SAACrB,GACI,KAAdA,EAAEsB,UACFtB,EAAEC,iBACF,EAAKC,MAAMqB,WAAWvB,EAAEI,OAAOE,OAC/B,EAAKkB,SAAS,CAACJ,QAAQ,IACvBpB,EAAEI,OAAOE,MAAQ,K,EAGzBmB,cAAgB,WACZ,EAAKD,UAAS,SAACL,EAAOjB,GAClB,MAAO,CAACkB,QAAQ,MAEtB,EAAKlB,MAAMqB,WAAW,EAAKJ,MAAMF,U,uDAG/B,OACI,yBAAKV,UAAU,cACX,8BAAUA,UAAU,OAAOmB,UAAWjB,KAAKY,eAAgBM,YAAY,kBAAvE,KACA,4BAAQC,QAASnB,KAAKgB,eAAtB,a,GAxBSb,cCqCViB,E,4MAlCXV,MAAQ,CACJJ,SAAU,I,EAIde,WAAa,IAAIC,UAAU,iC,EAW3BR,WAAa,SAACN,GACV,IAAMe,EAAO,CAAE3B,SAAU,EAAKH,MAAMG,SAAUY,QAASA,GACvD,EAAKa,WAAWG,KAAKC,KAAKC,UAAUH,IACpC,IAAMI,EAAS,CAAE/B,SAAU,MAAOY,QAASA,GAC3C,EAAKO,SAAS,CAAET,SAAS,GAAD,mBAAM,EAAKI,MAAMJ,UAAjB,CAA2BqB,O,kEAZlC,IAAD,OAChB3B,KAAKqB,WAAWO,UAAY,SAACpB,GACzB,IAAMe,EAAOE,KAAKI,MAAMrB,EAAQe,MAChC,EAAKR,SAAS,CAAET,SAAS,GAAD,mBAAM,EAAKI,MAAMJ,UAAjB,CAA2BiB,S,+BAcvD,OACI,yBAAKzB,UAAU,gBACX,kBAAC,EAAD,CAAqBQ,SAAUN,KAAKU,MAAMJ,WAC1C,kBAAC,EAAD,CAAYQ,WAAYd,KAAKc,kB,GA7BlBX,aC4BZ2B,G,kNAzBbpB,MAAQ,CACNd,SAAU,M,EAGZF,YAAc,SAACE,GACb,EAAKmB,SAAS,CAAEnB,c,uDAGhB,OAGE,yBAAKE,UAAU,OAGVE,KAAKU,MAAMd,SAGV,kBAAC,EAAD,CAAcA,SAAUI,KAAKU,MAAMd,WAFnC,kBAAC,EAAD,CAAOF,YAAaM,KAAKN,mB,GAjBnBS,cCHlB4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.68261c41.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './login.css';\r\n\r\n// A SIMPLE COMPONENT THAT REQUESTS USERNAME WHEN A EVERY NEW CONNECTION IS MADE\r\nclass Login extends Component {\r\n\r\n    // THIS FUNCTION TAKES THE USERNAME INPUT VALUE AND MAKES IT AVAILABLE IN THE APP COMPONENT USING PROPS\r\n    login = (e) => {\r\n        e.preventDefault()\r\n        this.props.setUsername(e.target.username.value)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <form onSubmit={this.login}>\r\n                    <label>Username</label>\r\n                    <input type='text' id='username' />\r\n                    <input type='submit' id='submit' value='Log in' />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from 'react';\r\nimport './DisplayConversation.css'\r\n\r\nclass DisplayConversation extends Component {\r\n    // THIS FUNCTION IS CALLED AS A PROP TO SHOW MESSGAGES SENT TO THE SERVER\r\n    displayMessage = () => this.props.messages.map(message => \r\n    <div className='data'>\r\n        <div className='sender'>{message.username}</div>\r\n        <div className='message'>{message.message}</div>\r\n    </div>\r\n    )\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"displayConversation\">\r\n                <h3 className='header'>ZURI CLUBHOUSE</h3>\r\n                <hr />\r\n                {this.displayMessage()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayConversation;\r\n","import React, { Component } from 'react';\r\nimport './MessageBox.component.css'\r\n\r\n\r\nclass MessageBox extends Component {\r\n   \r\n    state = {\r\n        submit: false,\r\n        message: ''\r\n      }\r\n    messageHandler = (e) => {\r\n        if (e.keyCode === 13) {\r\n            e.preventDefault()\r\n            this.props.getMessage(e.target.value)\r\n            this.setState({submit: false})\r\n            e.target.value = ''\r\n        }\r\n    }\r\n    sumbitMessage = () =>{\r\n        this.setState((state, props) =>  {\r\n            return {submit: true};\r\n      })\r\n      this.props.getMessage(this.state.message)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"messageBox\">\r\n                <textarea className=\"text\" onKeyDown={this.messageHandler} placeholder='Type Something'> </textarea>\r\n                <button onClick={this.sumbitMessage}>\r\n                   Send\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageBox;\r\n","// NECESSARY IMPORTS\r\nimport React, { Component, } from 'react';\r\nimport DisplayConversation from '../Displayconversation/DisplayConversation.component';\r\nimport MessageBox from '../MessageBox/MessageBox.component';\r\n\r\n// MESSAGEPANEL COMPONENT , ITS THE COMPONENT THAT GETS DISPLAYED WHEN THE USER HAS GIVEN A USERNAME\r\nclass MessagePanel extends Component {\r\n    state = {\r\n        messages: []\r\n    }\r\n    // THIS IS HOW TO CREATE A WEBSOCKET CONNECTION FROM THE CLIENT \r\n    // SIDE, THIS IS THE ONLY COMPONENT THAT NEEDS TO COMMUNICATE WITH THE SERVER\r\n    connection = new WebSocket('ws://zuri-chat.herokuapp.com/')\r\n    // ON THE MOUNTING PHASE A FUNCTION IS CREATED THAT RETRIEVES \r\n    // MESSAGES AUTOMATICALLY FROM THE SERVER\r\n    componentDidMount() {\r\n        this.connection.onmessage = (message) => {\r\n            const data = JSON.parse(message.data)\r\n            this.setState({ messages: [...this.state.messages, data] })\r\n        }\r\n    }\r\n     \r\n    //FUNCTION AUTOMATICALLY SENDS MESSAGE BACK TO THE SERVER SO THAT EVERYONE CAN SEE\r\n    getMessage = (message) => {\r\n        const data = { username: this.props.username, message: message }\r\n        this.connection.send(JSON.stringify(data))\r\n        const toSelf = { username: \"you\", message: message }\r\n        this.setState({ messages: [...this.state.messages, toSelf] })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"messagePanel\">\r\n                <DisplayConversation messages={this.state.messages} />\r\n                <MessageBox getMessage={this.getMessage} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessagePanel;\r\n","// NECCESSARY IMPORTS\r\nimport React, { Component } from 'react';\r\nimport Login from './components/Login/Login.component'\r\nimport MessagePanel from './components/MeassagePanel/MessagePanel.component'\r\nimport './App.css';\r\n\r\n// MAIN COMPONENT TO OUR APPLICATION\r\nclass App extends Component {\r\n  // STATE : USERNAME SET TO NULL ,TO BE RECIEVED VIA PROPS FROM THE LOGIN COMPONENT\r\n  state = {\r\n    username: null\r\n  }\r\n  // THIS FUNCTION IS PASSED IN AS A PROP TO THE LOGIN COMPONENT TO RETRIEVE THE USERNAME VALUE FROM THE INPUT IN LOGIN\r\n  setUsername = (username) => {\r\n    this.setState({ username })\r\n  }\r\n  render() {\r\n    return (\r\n      // CONDITIONAL RENDERING OF EITHER THE MESSAGEPANEL COMPONENT(IF USER IS LOGGED)  OR\r\n      // LOGIN COMPONENT IF THE USER IS YET TO LOGIN\r\n      <div className=\"App\">\r\n\r\n        {\r\n          !this.state.username ?\r\n            <Login setUsername={this.setUsername} />\r\n            :\r\n            <MessagePanel username={this.state.username} />\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}